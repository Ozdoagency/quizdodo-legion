import { getQuestions } from '../data/questions';

export const TELEGRAM_BOT_TOKEN = "7704057139:AAG5O92Mom3YcuheZa8OgCIdlyzjnZiaUfQ";
export const TELEGRAM_CHAT_ID = "278210959";

function formatDate() {
  return new Date().toLocaleString('uk-UA', { dateStyle: 'short', timeStyle: 'short' });
}

export function formatAnswers(answers: Record<string, any>, language: string = 'uk') {
  const questions = getQuestions(language);
  let msg = `<b>üì© –ó–∞—è–≤–∫–∞ –∏–∑ QuizDo:</b>\n\n`;
  msg += `<b>–î–∞—Ç–∞:</b> ${formatDate()}\n\n`;
  msg += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> ${(answers.countryCode || '')}${answers.phone || '-'}\n`;
  msg += `<b>–£–¥–æ–±–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä:</b> ${answers.messenger || '-'}\n`;
  if (answers.telegramUsername) {
    msg += `<b>Username Telegram:</b> ${answers.telegramUsername}\n`;
  }
  msg += `\n`;
  msg += `<b>–û—Ç–≤–µ—Ç—ã:</b>\n`;

  questions.forEach((q, idx) => {
    if (q.type === 'contact') return;
    const answer = answers[idx];
    if (answer === undefined || answer === null || answer === '') return;
    if (q.type === 'multiple' && Array.isArray(answer)) {
      msg += `${idx + 1}) ${q.question}\n`;
      answer.forEach((val: string) => {
        const opt = (q.options as any[]).find(o => o.value === val);
        msg += `- ${opt ? opt.value : val}\n`;
      });
    } else {
      const opt = Array.isArray(q.options)
        ? (q.options as any[]).find(o => o.value === answer)
        : null;
      msg += `${idx + 1}) ${q.question}\n`;
      msg += `- ${opt ? opt.value : answer}\n`;
    }
    msg += '\n';
  });

  // UTM
  const utm = Object.entries(answers).filter(([k]) => k.startsWith('utm_'));
  msg += `\n<b>UTM-–º–µ—Ç–∫–∏:</b>\n`;
  if (utm.length) {
    utm.forEach(([k, v]) => {
      msg += `${k}: ${String(v)}\n`;
    });
  }

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  if (answers.userInfo) {
    msg += `\n<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n`;
    msg += `–õ–æ–∫–∞—Ü–∏—è: ${answers.userInfo.country}, ${answers.userInfo.city} (${answers.userInfo.timezone})\n`;
    msg += `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${answers.userInfo.device}\n`;
  }

  // Cookies
  if (answers.cookies) {
    msg += `\nCookies:\n${answers.cookies}`;
  }

  return msg;
}

export async function sendToTelegram(answers: Record<string, any>, language: string = 'uk') {
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ
  if (!answers.userCountry) {
    try {
      const ipResponse = await fetch('https://api.ipify.org?format=json');
      const ipData = await ipResponse.json();
      const ip = ipData.ip;
      
      const geoResponse = await fetch(`https://ipapi.co/${ip}/json/`);
      const geoData = await geoResponse.json();
      
      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      answers.userInfo = {
        ip: ip,
        country: geoData.country_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        city: geoData.city || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        region: geoData.region || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        timezone: geoData.timezone || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        currency: geoData.currency || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        isp: geoData.org || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        asn: geoData.asn || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        browser: answers.userAgent || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        device: answers.device || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        os: answers.os || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
      };
    } catch (error) {
      answers.userInfo = {
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'
      };
    }
  }
  
  const text = encodeURIComponent(formatAnswers(answers, language));
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage?chat_id=${TELEGRAM_CHAT_ID}&text=${text}&parse_mode=HTML`;
  await fetch(url);
} 